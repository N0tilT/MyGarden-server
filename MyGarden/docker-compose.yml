x-def-logging: &default-logging
  driver: "loki"
  options:
    loki-url: "http://localhost:3100/loki/api/v1/push"
    loki-batch-size: "100"
    loki-retries: 2
    loki-max-backoff: 1000ms
    loki-timeout: 1s

services:

  loki:
    hostname: loki
    image: grafana/loki:2.9.0
    environment:
      TZ: ${SYSTEM_TIMEZONE:-Europe/Moscow}
    volumes:
      - ./etc/loki/retention-config.yaml:/etc/loki/retention-config.yaml
    networks:
      - stats
      - backend
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/retention-config.yaml

  prometheus:
    stop_grace_period: 30s
    stop_signal: SIGTERM
    image: prom/prometheus:v2.51.2
    volumes:
      - ./etc/prometheus:/workspace
    command:
      - --config.file=/workspace/prometheus.yml
      - --enable-feature=exemplar-storage
    depends_on:
      - loki
    logging: *default-logging
    networks:
      - stats

  grafana:
    stop_grace_period: 30s
    stop_signal: SIGTERM
    image: grafana/grafana:10.4.2
    ports:
      - "3000:3000"
    volumes:
      - ./etc/grafana/data:/var/lib/grafana
      - ./etc/grafana/provisioning:/etc/grafana/provisioning
      - ./etc/dashboards:/etc/grafana/dashboards
    environment:
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "admin"
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    depends_on:
      - loki
      - prometheus
    logging: *default-logging
    networks:
      - postgres
      - backend
      - stats

  postgres:
    stop_grace_period: 30s
    stop_signal: SIGTERM
    container_name: postgres_container
    image: postgres:14.8-alpine3.18
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: "plantsdb"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "123Secret_a"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - plants-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d plantsdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - postgres
      - backend

  pgadmin:

    stop_grace_period: 30s
    stop_signal: SIGTERM
    container_name: pgadmin_container
    image: dpage/pgadmin4:7.2
    environment:
      PGADMIN_DEFAULT_EMAIL: "plantsuser@plants.com"
      PGADMIN_DEFAULT_PASSWORD: "123Secret_a"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - postgres
  authapi:
    stop_grace_period: 30s
    stop_signal: SIGTERM
    container_name: auth-api
    image: ${DOCKER_REGISTRY-}authapi
    build:
      context: .
      dockerfile: src/AuthAPI/Dockerfile
    environment:
      - DB_HOST=postgres
      - POSTGRES_DB=plantsdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123Secret_a
      - APP_NAME=auth
    depends_on:
      postgres:
        condition: service_healthy
      loki:
        condition: service_started
    networks:
      - backend
    healthcheck:
      test: curl --fail http://localhost:8080/health || exit 1
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "app=auth"
      - "service=backend"
    logging: *default-logging

  gardenapi:
    stop_grace_period: 30s
    stop_signal: SIGTERM
    container_name: garden-api
    image: ${DOCKER_REGISTRY-}gardenapi
    build:
      context: .
      dockerfile: src/GardenAPI/Dockerfile
    environment:
      - DB_HOST=postgres
      - POSTGRES_DB=plantsdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123Secret_a
      - APP_NAME=garden
    depends_on:
      postgres:
        condition: service_healthy
      loki:
        condition: service_started
      authapi:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: curl --fail http://localhost:8080/health || exit 1
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "app=garden"
      - "service=backend"
    logging: *default-logging

  assistantapi:
    stop_grace_period: 30s
    stop_signal: SIGTERM
    container_name: assistant-api
    image: ${DOCKER_REGISTRY-}assistantapi
    build:
      context: .
      dockerfile: src/AssistantAPI/Dockerfile
    environment:
      - DB_HOST=postgres
      - POSTGRES_DB=plantsdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123Secret_a
      - APP_NAME=assistant
    depends_on:
      loki:
        condition: service_started
      postgres:
        condition: service_healthy
      gardenapi:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: curl --fail http://localhost:8080/health || exit 1
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "app=assistant"
      - "service=backend"
    logging: *default-logging

  recognizeapi:
    stop_grace_period: 30s
    stop_signal: SIGTERM
    container_name: recognize-api
    build:
      context: .
      dockerfile: src/RecognizeAPI/Dockerfile
    environment:
      - DB_HOST=postgres
      - POSTGRES_DB=plantsdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123Secret_a
      - APP_NAME=recognize
    depends_on:
      loki:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: curl --fail http://localhost:80/health || exit 1
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "app=recognize"
      - "service=backend"
    logging: *default-logging

  apigateway:
    stop_grace_period: 30s
    stop_signal: SIGTERM
    container_name: api-gateway
    image: ${DOCKER_REGISTRY-}apigateway
    environment:
      - APP_NAME=gateway
    build:
      context: .
      dockerfile: src/ApiGateway/Dockerfile
    ports:
      - "8081:8080"
    networks:
      - backend
      - gate
    labels:
      - "app=gateway"
      - "service=backend"
    logging: *default-logging

volumes:
  plants-data:
  pgadmin-data:
  loki-storage:


networks:
  postgres:
    driver: bridge
  gate:
    driver: bridge
  stats:
    driver: bridge
  backend:
    driver: bridge
