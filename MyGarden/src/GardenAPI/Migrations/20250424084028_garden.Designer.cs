// <auto-generated />
using System;
using GardenAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GardenAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250424084028_garden")]
    partial class garden
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EntitiesLibrary.Common.GardenType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("GardenType");
                });

            modelBuilder.Entity("EntitiesLibrary.Common.GrowStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("GrowStage");
                });

            modelBuilder.Entity("EntitiesLibrary.Common.LightNeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("LightNeed");
                });

            modelBuilder.Entity("EntitiesLibrary.Common.PlantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("PlantType");
                });

            modelBuilder.Entity("EntitiesLibrary.Common.PlantVariety", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int?>("PlantTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("PlantTypeId");

                    b.ToTable("PlantVariety");
                });

            modelBuilder.Entity("EntitiesLibrary.Common.WateringNeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("WateringNeed");
                });

            modelBuilder.Entity("EntitiesLibrary.Gardens.Garden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Beds")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int?>("GardenTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GardenTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Garden");
                });

            modelBuilder.Entity("EntitiesLibrary.Plants.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("EntitiesLibrary.Plants.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BiologyTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Description")
                        .HasMaxLength(10240)
                        .HasColumnType("character varying(10240)");

                    b.Property<string>("Fertilization")
                        .HasMaxLength(10240)
                        .HasColumnType("character varying(10240)");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int>("LightNeedId")
                        .HasColumnType("integer");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("PlantVarietyId")
                        .HasColumnType("integer");

                    b.Property<string>("Replacing")
                        .HasMaxLength(10240)
                        .HasColumnType("character varying(10240)");

                    b.Property<int?>("RipeningPeriod")
                        .HasColumnType("integer");

                    b.Property<int>("StageId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Toxicity")
                        .HasMaxLength(10240)
                        .HasColumnType("character varying(10240)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WateringNeedId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LightNeedId");

                    b.HasIndex("PlantTypeId");

                    b.HasIndex("PlantVarietyId");

                    b.HasIndex("StageId");

                    b.HasIndex("UserId");

                    b.HasIndex("WateringNeedId");

                    b.ToTable("Plant");
                });

            modelBuilder.Entity("EntitiesLibrary.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EntitiesLibrary.Common.PlantVariety", b =>
                {
                    b.HasOne("EntitiesLibrary.Common.PlantType", "PlantType")
                        .WithMany("PlantVarieties")
                        .HasForeignKey("PlantTypeId");

                    b.Navigation("PlantType");
                });

            modelBuilder.Entity("EntitiesLibrary.Gardens.Garden", b =>
                {
                    b.HasOne("EntitiesLibrary.Common.GardenType", null)
                        .WithMany("Gardens")
                        .HasForeignKey("GardenTypeId");
                });

            modelBuilder.Entity("EntitiesLibrary.Plants.Group", b =>
                {
                    b.HasOne("EntitiesLibrary.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntitiesLibrary.Plants.Plant", b =>
                {
                    b.HasOne("EntitiesLibrary.Plants.Group", "Group")
                        .WithMany("Plants")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntitiesLibrary.Common.LightNeed", "LightNeed")
                        .WithMany("Plants")
                        .HasForeignKey("LightNeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntitiesLibrary.Common.PlantType", "PlantType")
                        .WithMany("Plants")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntitiesLibrary.Common.PlantVariety", "PlantVariety")
                        .WithMany("Plants")
                        .HasForeignKey("PlantVarietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntitiesLibrary.Common.GrowStage", "Stage")
                        .WithMany("Plants")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntitiesLibrary.Common.WateringNeed", "WateringNeed")
                        .WithMany("Plants")
                        .HasForeignKey("WateringNeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("LightNeed");

                    b.Navigation("PlantType");

                    b.Navigation("PlantVariety");

                    b.Navigation("Stage");

                    b.Navigation("WateringNeed");
                });

            modelBuilder.Entity("EntitiesLibrary.Common.GardenType", b =>
                {
                    b.Navigation("Gardens");
                });

            modelBuilder.Entity("EntitiesLibrary.Common.GrowStage", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("EntitiesLibrary.Common.LightNeed", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("EntitiesLibrary.Common.PlantType", b =>
                {
                    b.Navigation("PlantVarieties");

                    b.Navigation("Plants");
                });

            modelBuilder.Entity("EntitiesLibrary.Common.PlantVariety", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("EntitiesLibrary.Common.WateringNeed", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("EntitiesLibrary.Plants.Group", b =>
                {
                    b.Navigation("Plants");
                });
#pragma warning restore 612, 618
        }
    }
}
